{"version":3,"file":"selecto.cjs.js","sources":["../src/utils.ts","../src/consts.ts","../src/SelectoManager.tsx","../src/Selecto.tsx","../src/index.umd.ts"],"sourcesContent":["import { Hypertext, Rect } from \"./types\";\nimport { IObject, addClass, hasClass, calculateBoundSize } from \"@daybrush/utils\";\nimport { diff } from \"@egjs/children-differ\";\n\nexport function getClient(e: MouseEvent | TouchEvent) {\n    if (\"touches\" in e) {\n        const touch = e.touches[0] || e.changedTouches[0];\n\n        return {\n            clientX: touch.clientX,\n            clientY: touch.clientY,\n        };\n    } else {\n        return {\n            clientX: e.clientX,\n            clientY: e.clientY,\n        };\n    }\n}\n\nexport function createElement(\n    jsx: Hypertext,\n    prevTarget?: HTMLElement | SVGElement,\n    container?: HTMLElement | SVGElement,\n) {\n    const { tag, children, attributes, className, style } = jsx;\n    const el = prevTarget || document.createElement(tag) as HTMLElement | SVGElement;\n\n    for (const name in attributes) {\n        el.setAttribute(name, attributes[name]);\n    }\n    const elChildren = el.children;\n    children.forEach((child, i) => {\n        createElement(child, elChildren[i] as HTMLElement | SVGElement, el);\n    });\n    if (className) {\n        className.split(\" \").forEach(name => {\n            if (!hasClass(el, name)) {\n                addClass(el, name);\n            }\n        });\n    }\n    if (style) {\n        const elStyle = el.style;\n        for (const name in style) {\n            elStyle[name] = style[name];\n        }\n    }\n    if (!prevTarget && container) {\n        container.appendChild(el);\n    }\n    return el;\n}\nexport function h(\n    tag: string,\n    attrs: IObject<any>,\n    ...children: Hypertext[]\n): Hypertext {\n    const {\n        className = \"\",\n        style = {},\n        ...attributes\n    } = attrs || {};\n    return {\n        tag,\n        className,\n        style,\n        attributes,\n        children,\n    };\n}\n\nexport function diffValue<T>(prev: T, cur: T, func: (prev: T, cur: T) => void) {\n    if (prev !== cur) {\n        func(prev, cur);\n    }\n}\n\nexport function getRect(\n    e: any, ratio: number,\n    boundArea = e.datas.boundArea,\n): Rect {\n    let {\n        distX = 0,\n        distY = 0,\n    } = e;\n    const { startX, startY } = e.datas;\n\n    if (ratio > 0) {\n        const nextHeight = Math.sqrt((distX * distX + distY * distY) / (1 + ratio * ratio));\n        const nextWidth = ratio * nextHeight;\n\n        distX = (distX >= 0 ? 1 : -1) * nextWidth;\n        distY = (distY >= 0 ? 1 : -1) * nextHeight;\n    }\n    let width = Math.abs(distX);\n    let height = Math.abs(distY);\n\n    const maxWidth = distX < 0 ? startX - boundArea.left : boundArea.right - startX;\n    const maxHeight = distY < 0 ? startY - boundArea.top : boundArea.bottom - startY;\n\n    [width, height] = calculateBoundSize([width, height], [0, 0], [maxWidth, maxHeight], !!ratio);\n    distX = (distX >= 0 ? 1 : -1) * width;\n    distY = (distY >= 0 ? 1 : -1) * height;\n\n    const tx = Math.min(0, distX);\n    const ty = Math.min(0, distY);\n    const left = startX + tx;\n    const top = startY + ty;\n\n    return {\n        left,\n        top,\n        right: left + width,\n        bottom: top + height,\n        width,\n        height,\n    };\n}\n\nexport function getDefaultElementRect(el: HTMLElement | SVGElement) {\n    const rect = el.getBoundingClientRect();\n    const { left, top, width, height } = rect;\n\n    return {\n        pos1: [left, top],\n        pos2: [left + width, top],\n        pos3: [left, top + height],\n        pos4: [left + width, top + height],\n    };\n}\n\nexport function passTargets(\n    beforeTargets: Array<HTMLElement | SVGElement>,\n    afterTargets: Array<HTMLElement | SVGElement>,\n) {\n    const {\n        list,\n        prevList,\n        added,\n        removed,\n    } = diff(beforeTargets, afterTargets);\n\n    return added.map(index => list[index]).concat(removed.map(index => prevList[index]));\n}\n","import styled from \"css-styled\";\nimport { SelectoOptions } from \"./types\";\n\nexport const injector = styled(`\n:host {\n    position: fixed;\n    display: none;\n    border: 1px solid #4af;\n    background: rgba(68, 170, 255, 0.5);\n    z-index: 100;\n}\n`);\n\n/**\n * @memberof Selecto\n */\nexport const CLASS_NAME = `selecto-selection ${injector.className}`;\n\nexport const PROPERTIES = [\n    \"boundContainer\",\n    \"selectableTargets\",\n    \"selectByClick\",\n    \"selectFromInside\",\n    \"continueSelect\",\n    \"toggleContinueSelect\",\n    \"keyContainer\",\n    \"hitRate\",\n    \"scrollOptions\",\n    \"checkInput\",\n    \"preventDefault\",\n    \"ratio\",\n    \"getElementRect\",\n    \"preventDragFromInside\",\n] as const;\n/**\n * @memberof Selecto\n */\nexport const OPTIONS = [\n    // ignore target, container,\n    \"dragContainer\",\n    \"cspNonce\",\n    ...PROPERTIES,\n] as const;\n\nexport const OPTION_TYPES: { [key in keyof SelectoOptions]: any } = {\n    boundContainer: null,\n    target: null,\n    container: null,\n    dragContainer: null,\n    selectableTargets: Array,\n    selectByClick: Boolean,\n    selectFromInside: Boolean,\n    continueSelect: Boolean,\n    toggleContinueSelect: Array,\n    keyContainer: null,\n    hitRate: Number,\n    scrollOptions: Object,\n    checkInput: Boolean,\n    preventDefault: Boolean,\n    cspNonce: String,\n    ratio: Number,\n    getElementRect: Function,\n    preventDragFromInside: Boolean,\n};\n\n/**\n * @memberof Selecto\n */\nexport const EVENTS = [\n    \"dragStart\",\n    \"drag\",\n    \"dragEnd\",\n    \"selectStart\",\n    \"select\",\n    \"selectEnd\",\n    \"keydown\",\n    \"keyup\",\n    \"scroll\",\n] as const;\n\n/**\n * @memberof Selecto\n */\nexport const METHODS = [\n    \"clickTarget\",\n    \"getSelectableElements\",\n    \"setSelectedTargets\",\n    \"getElementPoints\",\n    \"getSelectedTargets\",\n    \"findSelectableTargets\",\n    \"triggerDragStart\",\n] as const;\n","import EventEmitter from \"@scena/event-emitter\";\nimport Gesto, { OnDrag, OnDragStart } from \"gesto\";\nimport { InjectResult } from \"css-styled\";\nimport { Properties } from \"framework-utils\";\nimport {\n    isObject,\n    camelize,\n    IObject,\n    addEvent,\n    removeEvent,\n    isArray,\n    isString,\n    between,\n} from \"@daybrush/utils\";\nimport { diff } from \"@egjs/children-differ\";\nimport DragScroll from \"@scena/dragscroll\";\nimport KeyController, { getCombi } from \"keycon\";\nimport {\n    getAreaSize,\n    getOverlapPoints,\n    isInside,\n    fitPoints,\n} from \"overlap-area\";\nimport {\n    createElement,\n    h,\n    getClient,\n    diffValue,\n    getRect,\n    getDefaultElementRect,\n    passTargets,\n} from \"./utils\";\nimport {\n    SelectoOptions,\n    SelectoProperties,\n    OnDragEvent,\n    SelectoEvents,\n    Rect,\n    BoundContainer,\n} from \"./types\";\nimport { PROPERTIES, injector, CLASS_NAME } from \"./consts\";\n\n/**\n * Selecto.js is a component that allows you to select elements in the drag area using the mouse or touch.\n * @sort 1\n * @extends EventEmitter\n */\n@Properties(PROPERTIES as any, (prototype, property) => {\n    const attributes: IObject<any> = {\n        enumerable: true,\n        configurable: true,\n        get() {\n            return this.options[property];\n        },\n    };\n    const setter = camelize(`set ${property}`);\n    if (prototype[setter]) {\n        attributes.set = function set(value) {\n            this[setter](value);\n        };\n    } else {\n        attributes.set = function set(value) {\n            this.options[property] = value;\n        };\n    }\n    Object.defineProperty(prototype, property, attributes);\n})\nclass Selecto extends EventEmitter<SelectoEvents> {\n    public options: SelectoOptions;\n    private target!: HTMLElement | SVGElement;\n    private dragContainer!: Element | Window | Element[];\n    private container!: HTMLElement;\n    private gesto!: Gesto;\n    private injectResult!: InjectResult;\n    private selectedTargets: Array<HTMLElement | SVGElement> = [];\n    private dragScroll: DragScroll = new DragScroll();\n    private keycon!: KeyController;\n    /**\n     *\n     */\n    constructor(options: Partial<SelectoOptions> = {}) {\n        super();\n        this.target = options.target;\n        this.container = options.container || document.body;\n        this.options = {\n            target: null,\n            container: null,\n            dragContainer: null,\n            selectableTargets: [],\n            selectByClick: true,\n            selectFromInside: true,\n            hitRate: 100,\n            continueSelect: false,\n            toggleContinueSelect: null,\n            keyContainer: null,\n            scrollOptions: undefined,\n            checkInput: false,\n            preventDefault: false,\n            boundContainer: false,\n            preventDragFromInside: true,\n            getElementRect: getDefaultElementRect,\n            cspNonce: \"\",\n            ratio: 0,\n            ...options,\n        };\n        this.initElement();\n        this.initDragScroll();\n        this.setKeyController();\n    }\n    /**\n     * You can set the currently selected targets.\n     *\n     */\n    public setSelectedTargets(\n        selectedTargets: Array<HTMLElement | SVGElement>\n    ): this {\n        this.selectedTargets = selectedTargets;\n\n        return this;\n    }\n    /**\n     * You can get the currently selected targets.\n     */\n    public getSelectedTargets(): Array<HTMLElement | SVGElement> {\n        return this.selectedTargets;\n    }\n    public setKeyContainer(keyContainer: HTMLElement | Document | Window) {\n        const options = this.options;\n\n        diffValue(options.keyContainer, keyContainer, () => {\n            options.keyContainer = keyContainer;\n\n            this.setKeyController();\n        });\n    }\n    public setToggleContinueSelect(\n        toggleContinueSelect: string[][] | string[] | string\n    ) {\n        const options = this.options;\n\n        diffValue(options.toggleContinueSelect, toggleContinueSelect, () => {\n            options.toggleContinueSelect = toggleContinueSelect;\n\n            this.setKeyEvent();\n        });\n    }\n    public setPreventDefault(value: boolean) {\n        this.gesto.options.preventDefault = value;\n    }\n    public setCheckInput(value: boolean) {\n        this.gesto.options.checkInput = value;\n    }\n    /**\n     * `OnDragStart` is triggered by an external event.\n     * @param - external event\n     * @example\n     * import Selecto from \"selecto\";\n     *\n     * const selecto = new Selecto();\n     *\n     * window.addEventListener(\"mousedown\", e => {\n     *   selecto.triggerDragStart(e);\n     * });\n     */\n    public triggerDragStart(e: MouseEvent | TouchEvent) {\n        this.gesto.triggerDragStart(e);\n        return this;\n    }\n    /**\n     * Destroy elements, properties, and events.\n     */\n    public destroy(): void {\n        this.off();\n        this.keycon && this.keycon.destroy();\n        this.gesto.unset();\n        this.injectResult.destroy();\n        removeEvent(document, \"selectstart\", this.onDocumentSelectStart);\n\n        this.keycon = null;\n        this.gesto = null;\n        this.injectResult = null;\n        this.target = null;\n        this.container = null;\n        this.options = null;\n    }\n    public getElementPoints(target: HTMLElement | SVGElement) {\n        const getElementRect = this.getElementRect || getDefaultElementRect;\n        const info = getElementRect(target);\n        const points = [info.pos1, info.pos2, info.pos4, info.pos3];\n\n        if (getElementRect !== getDefaultElementRect) {\n            const rect = target.getBoundingClientRect();\n\n            return fitPoints(points, rect);\n        }\n        return points;\n    }\n    /**\n     * Get all elements set in `selectableTargets`.\n     */\n    public getSelectableElements() {\n        const selectableElements: Array<HTMLElement | SVGElement> = [];\n\n        this.options.selectableTargets.forEach((target) => {\n            if (isObject(target)) {\n                selectableElements.push(target);\n            } else {\n                const elements = [].slice.call(\n                    document.querySelectorAll(target)\n                );\n\n                elements.forEach((el) => {\n                    selectableElements.push(el);\n                });\n            }\n        });\n\n        return selectableElements;\n    }\n    /**\n     * Find for selectableTargets again during drag event\n     */\n    public findSelectableTargets(datas: any = this.gesto.getEventDatas()) {\n        const selectableTargets = this.getSelectableElements();\n        const selectablePoints = selectableTargets.map((target) =>\n            this.getElementPoints(target)\n        );\n        datas.selectableTargets = selectableTargets;\n        datas.selectablePoints = selectablePoints;\n    }\n    /**\n     * External click or mouse events can be applied to the selecto.\n     * @params - Extenal click or mouse event\n     * @params - Specify the clicked target directly.\n     */\n    public clickTarget(\n        e: MouseEvent | TouchEvent,\n        clickedTarget?: Element\n    ): this {\n        const { clientX, clientY } = getClient(e);\n        const dragEvent = {\n            datas: {\n                selectFlag: false,\n            },\n            clientX,\n            clientY,\n            inputEvent: e,\n            isClick: true,\n            stop: () => {\n                return false;\n            },\n        } as any;\n        if (this.onDragStart(dragEvent, clickedTarget)) {\n            this.onDragEnd(dragEvent);\n        }\n        return this;\n    }\n    private setKeyController() {\n        const { keyContainer, toggleContinueSelect } = this.options;\n\n        if (this.keycon) {\n            this.keycon.destroy();\n            this.keycon = null;\n        }\n        if (toggleContinueSelect) {\n            this.keycon = new KeyController(keyContainer || window);\n            this.keycon\n                .keydown(this.onKeyDown)\n                .keyup(this.onKeyUp)\n                .on(\"blur\", this.onBlur);\n        }\n    }\n    private setKeyEvent() {\n        const { toggleContinueSelect } = this.options;\n        if (!toggleContinueSelect || this.keycon) {\n            return;\n        }\n        this.setKeyController();\n    }\n    private initElement() {\n        this.target = createElement(\n            (<div className={CLASS_NAME}></div>) as any,\n            this.target,\n            this.container\n        );\n\n        const target = this.target;\n\n        const { dragContainer, checkInput, preventDefault } = this.options;\n        this.dragContainer =\n            typeof dragContainer === \"string\"\n                ? [].slice.call(document.querySelectorAll(dragContainer))\n                : this.options.dragContainer || (this.target.parentNode as any);\n        this.gesto = new Gesto(this.dragContainer, {\n            checkWindowBlur: true,\n            container: window,\n            checkInput,\n            preventDefault,\n        }).on({\n            dragStart: this.onDragStart,\n            drag: this.onDrag,\n            dragEnd: this.onDragEnd,\n        });\n        addEvent(document, \"selectstart\", this.onDocumentSelectStart);\n\n        this.injectResult = injector.inject(target, {\n            nonce: this.options.cspNonce,\n        });\n    }\n    private hitTest(\n        selectRect: Rect,\n        clientX: number,\n        clientY: number,\n        targets: Array<HTMLElement | SVGElement>,\n        selectablePoints: number[][][]\n    ) {\n        const { hitRate, selectByClick } = this.options;\n        const { left, top, right, bottom } = selectRect;\n        const rectPoints = [\n            [left, top],\n            [right, top],\n            [right, bottom],\n            [left, bottom],\n        ];\n        return targets.filter((_, i) => {\n            const points = selectablePoints[i];\n            const inArea = isInside([clientX, clientY], points);\n\n            if (selectByClick && inArea) {\n                return true;\n            }\n            const overlapPoints = getOverlapPoints(rectPoints, points);\n\n            if (!overlapPoints.length) {\n                return false;\n            }\n            const overlapSize = getAreaSize(overlapPoints);\n            const targetSize = getAreaSize(points);\n            const rate = between(\n                Math.round((overlapSize / targetSize) * 100),\n                0,\n                100\n            );\n\n            if (rate >= Math.min(100, hitRate)) {\n                return true;\n            }\n            return false;\n        });\n    }\n    private initDragScroll() {\n        this.dragScroll\n            .on(\"scroll\", ({ container, direction }) => {\n                this.trigger(\"scroll\", {\n                    container,\n                    direction,\n                });\n            })\n            .on(\"move\", ({ offsetX, offsetY, inputEvent }) => {\n                const datas = inputEvent.datas;\n                datas.startX -= offsetX;\n                datas.startY -= offsetY;\n                datas.selectablePoints.forEach((points: number[][]) => {\n                    points.forEach((pos) => {\n                        pos[0] -= offsetX;\n                        pos[1] -= offsetY;\n                    });\n                });\n                this.gesto.scrollBy(\n                    offsetX,\n                    offsetY,\n                    inputEvent.inputEvent,\n                    false\n                );\n\n                inputEvent.distX += offsetX;\n                inputEvent.distY += offsetY;\n                this.check(inputEvent);\n            });\n    }\n    private select(\n        prevSelectedTargets: Array<HTMLElement | SVGElement>,\n        selectedTargets: Array<HTMLElement | SVGElement>,\n        rect: Rect,\n        inputEvent: any,\n        isStart?: boolean\n    ) {\n        const { added, removed, prevList, list } = diff(\n            prevSelectedTargets,\n            selectedTargets\n        );\n\n        this.selectedTargets = selectedTargets;\n\n        if (isStart) {\n            /**\n             * When the select(drag) starts, the selectStart event is called.\n             * @memberof Selecto\n             * @event selectStart\n             * @param {Selecto.OnSelect} - Parameters for the selectStart event\n             * @example\n             * import Selecto from \"selecto\";\n             *\n             * const selecto = new Selecto({\n             *   container: document.body,\n             *   selectByClick: true,\n             *   selectFromInside: false,\n             * });\n             *\n             * selecto.on(\"selectStart\", e => {\n             *   e.added.forEach(el => {\n             *     el.classList.add(\"selected\");\n             *   });\n             *   e.removed.forEach(el => {\n             *     el.classList.remove(\"selected\");\n             *   });\n             * }).on(\"selectEnd\", e => {\n             *   e.afterAdded.forEach(el => {\n             *     el.classList.add(\"selected\");\n             *   });\n             *   e.afterRemoved.forEach(el => {\n             *     el.classList.remove(\"selected\");\n             *   });\n             * });\n             */\n            this.trigger(\"selectStart\", {\n                selected: selectedTargets,\n                added: added.map((index) => list[index]),\n                removed: removed.map((index) => prevList[index]),\n                rect,\n                inputEvent,\n            });\n        }\n        if (added.length || removed.length) {\n            /**\n             * When the select in real time, the select event is called.\n             * @memberof Selecto\n             * @event select\n             * @param {Selecto.OnSelect} - Parameters for the select event\n             * @example\n             * import Selecto from \"selecto\";\n             *\n             * const selecto = new Selecto({\n             *   container: document.body,\n             *   selectByClick: true,\n             *   selectFromInside: false,\n             * });\n             *\n             * selecto.on(\"select\", e => {\n             *   e.added.forEach(el => {\n             *     el.classList.add(\"selected\");\n             *   });\n             *   e.removed.forEach(el => {\n             *     el.classList.remove(\"selected\");\n             *   });\n             * });\n             */\n            this.trigger(\"select\", {\n                selected: selectedTargets,\n                added: added.map((index) => list[index]),\n                removed: removed.map((index) => prevList[index]),\n                rect,\n                inputEvent,\n            });\n        }\n    }\n    private selectEnd(\n        startSelectedTargets: Array<HTMLElement | SVGElement>,\n        startPassedTargets: Array<HTMLElement | SVGElement>,\n        rect: Rect,\n        e: OnDragEvent\n    ) {\n        const { inputEvent, isDouble } = e;\n        const { added, removed, prevList, list } = diff(\n            startSelectedTargets,\n            this.selectedTargets\n        );\n        const {\n            added: afterAdded,\n            removed: afterRemoved,\n            prevList: afterPrevList,\n            list: afterList,\n        } = diff(startPassedTargets, this.selectedTargets);\n        const type = inputEvent && inputEvent.type;\n        const isDragStart = type === \"mousedown\" || type === \"touchstart\";\n\n        /**\n         * When the select(dragEnd or click) ends, the selectEnd event is called.\n         * @memberof Selecto\n         * @event selectEnd\n         * @param {Selecto.OnSelectEnd} - Parameters for the selectEnd event\n         * @example\n         * import Selecto from \"selecto\";\n         *\n         * const selecto = new Selecto({\n         *   container: document.body,\n         *   selectByClick: true,\n         *   selectFromInside: false,\n         * });\n         *\n         * selecto.on(\"selectStart\", e => {\n         *   e.added.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.removed.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * }).on(\"selectEnd\", e => {\n         *   e.afterAdded.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.afterRemoved.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * });\n         */\n        this.trigger(\"selectEnd\", {\n            selected: this.selectedTargets,\n            added: added.map((index) => list[index]),\n            removed: removed.map((index) => prevList[index]),\n            afterAdded: afterAdded.map((index) => afterList[index]),\n            afterRemoved: afterRemoved.map((index) => afterPrevList[index]),\n            isDragStart,\n            isDouble: !!isDouble,\n            rect,\n            inputEvent,\n        });\n    }\n    private onDragStart = (e: OnDragStart, clickedTarget?: Element) => {\n        const { datas, clientX, clientY, inputEvent } = e;\n        const {\n            continueSelect,\n            selectFromInside,\n            selectByClick,\n            boundContainer,\n            preventDragFromInside = true,\n        } = this.options;\n\n        this.findSelectableTargets(datas);\n        datas.startSelectedTargets = this.selectedTargets;\n\n        let boundArea = {\n            left: -Infinity,\n            top: -Infinity,\n            right: Infinity,\n            bottom: Infinity,\n        };\n\n        if (boundContainer) {\n            const boundInfo: Required<BoundContainer> =\n                isObject(boundContainer) && \"element\" in boundContainer\n                    ? {\n                          left: true,\n                          top: true,\n                          bottom: true,\n                          right: true,\n                          ...boundContainer,\n                      }\n                    : {\n                          element: boundContainer,\n                          left: true,\n                          top: true,\n                          bottom: true,\n                          right: true,\n                      };\n            const boundElement = boundInfo.element;\n            let rectElement: HTMLElement;\n\n            if (boundElement) {\n                if (isString(boundElement)) {\n                    rectElement = document.querySelector(boundElement);\n                } else if (boundElement === true) {\n                    rectElement = this.container;\n                } else {\n                    rectElement = boundElement;\n                }\n                const rect = rectElement.getBoundingClientRect();\n\n                if (boundInfo.left) {\n                    boundArea.left = rect.left;\n                }\n                if (boundInfo.top) {\n                    boundArea.top = rect.top;\n                }\n                if (boundInfo.right) {\n                    boundArea.right = rect.right;\n                }\n                if (boundInfo.bottom) {\n                    boundArea.bottom = rect.bottom;\n                }\n            }\n        }\n\n        datas.boundArea = boundArea;\n\n        const hitRect = {\n            left: clientX,\n            top: clientY,\n            right: clientX,\n            bottom: clientY,\n            width: 0,\n            height: 0,\n        };\n        let firstPassedTargets: Array<HTMLElement | SVGElement> = [];\n        if (!selectFromInside || selectByClick) {\n            let pointTarget = (clickedTarget ||\n                document.elementFromPoint(clientX, clientY)) as\n                | HTMLElement\n                | SVGElement;\n\n            while (pointTarget) {\n                if (\n                    datas.selectableTargets.indexOf(\n                        pointTarget as HTMLElement | SVGElement\n                    ) > -1\n                ) {\n                    break;\n                }\n                pointTarget = pointTarget.parentElement;\n            }\n            firstPassedTargets = pointTarget ? [pointTarget] : [];\n        }\n        const hasInsideTargets = firstPassedTargets.length > 0;\n        const isPreventSelect = !selectFromInside && hasInsideTargets;\n\n        if (isPreventSelect && !selectByClick) {\n            e.stop();\n            return false;\n        }\n        const type = inputEvent.type;\n        const isTrusted = type === \"mousedown\" || type === \"touchstart\";\n        /**\n         * When the drag starts, the dragStart event is called.\n         * Call the stop () function if you have a specific element or don't want to raise a select\n         * @memberof Selecto\n         * @event dragStart\n         * @param {OnDragStart} - Parameters for the dragStart event\n         * @example\n         * import Selecto from \"selecto\";\n         *\n         * const selecto = new Selecto({\n         *   container: document.body,\n         *   selectByClick: true,\n         *   selectFromInside: false,\n         * });\n         *\n         * selecto.on(\"dragStart\", e => {\n         *   if (e.inputEvent.target.tagName === \"SPAN\") {\n         *     e.stop();\n         *   }\n         * }).on(\"select\", e => {\n         *   e.added.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.removed.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * });\n         */\n        const result =\n            !(e as any).isClick && isTrusted\n                ? this.trigger(\"dragStart\", { ...e })\n                : true;\n\n        if (!result) {\n            e.stop();\n            return false;\n        }\n\n        if (!continueSelect) {\n            datas.startPassedTargets = [];\n        } else {\n            firstPassedTargets = passTargets(\n                this.selectedTargets,\n                firstPassedTargets\n            );\n            datas.startPassedTargets = this.selectedTargets;\n        }\n        this.select(\n            this.selectedTargets,\n            firstPassedTargets,\n            hitRect,\n            inputEvent,\n            true\n        );\n        datas.startX = clientX;\n        datas.startY = clientY;\n        datas.selectFlag = false;\n        datas.preventDragFromInside = false;\n        datas.boundsArea = this.target.style.cssText += `left:0px;top:0px;transform: translate(${clientX}px, ${clientY}px)`;\n\n        if (isPreventSelect && selectByClick) {\n            inputEvent.preventDefault();\n\n            if (preventDragFromInside) {\n                this.selectEnd(\n                    datas.startSelectedTargets,\n                    datas.startPassedTargets,\n                    hitRect,\n                    e\n                );\n                datas.preventDragFromInside = true;\n            }\n        } else {\n            datas.selectFlag = true;\n            if (type === \"touchstart\") {\n                inputEvent.preventDefault();\n            }\n            const { scrollOptions } = this.options;\n            if (scrollOptions && scrollOptions.container) {\n                this.dragScroll.dragStart(e, scrollOptions);\n            }\n        }\n        return true;\n    };\n    private check(e: any, rect = getRect(e, this.options.ratio)) {\n        const { datas, inputEvent } = e;\n        const { top, left, width, height } = rect;\n        const selectFlag = datas.selectFlag;\n        let prevSelectedTargets: Array<HTMLElement | SVGElement> = [];\n        let selectedTargets: Array<HTMLElement | SVGElement> = [];\n        if (selectFlag) {\n            this.target.style.cssText +=\n                `display: block;` +\n                `left:0px;top:0px;` +\n                `transform: translate(${left}px, ${top}px);` +\n                `width:${width}px;height:${height}px;`;\n\n            const passedTargets = this.hitTest(\n                rect,\n                datas.startX,\n                datas.startY,\n                datas.selectableTargets,\n                datas.selectablePoints\n            );\n            prevSelectedTargets = this.selectedTargets;\n            selectedTargets = passTargets(\n                datas.startPassedTargets,\n                passedTargets\n            );\n\n            this.selectedTargets = selectedTargets;\n        }\n\n        this.trigger(\"drag\", {\n            ...e,\n            isSelect: selectFlag,\n            rect,\n        });\n\n        if (selectFlag) {\n            this.select(prevSelectedTargets, selectedTargets, rect, inputEvent);\n        }\n    }\n    private onDrag = (e: OnDrag) => {\n        if (e.datas.selectFlag) {\n            const { scrollOptions } = this.options;\n            if (scrollOptions && scrollOptions.container) {\n                if (this.dragScroll.drag(e, scrollOptions)) {\n                    return;\n                }\n            }\n        }\n        this.check(e);\n    };\n    private onDragEnd = (e: OnDragEvent) => {\n        const { datas, inputEvent } = e;\n        const rect = getRect(e, this.options.ratio);\n        const selectFlag = datas.selectFlag;\n\n        if (inputEvent && !e.isClick) {\n            this.trigger(\"dragEnd\", {\n                isDouble: !!e.isDouble,\n                isDrag: false,\n                isSelect: selectFlag,\n                ...e,\n                rect,\n            });\n        }\n        this.target.style.cssText += \"display: none;\";\n        if (selectFlag) {\n            datas.selectFlag = false;\n            this.dragScroll.dragEnd();\n        }\n        if (!datas.preventDragFromInside) {\n            this.selectEnd(\n                datas.startSelectedTargets,\n                datas.startPassedTargets,\n                rect,\n                e\n            );\n        }\n    };\n    private sameCombiKey(e: any, isKeyup?: boolean) {\n        const toggleContinueSelect = [].concat(\n            this.options.toggleContinueSelect\n        );\n        const combi = getCombi(e.inputEvent, e.key);\n        const toggleKeys = isArray(toggleContinueSelect[0])\n            ? toggleContinueSelect\n            : [toggleContinueSelect];\n\n        if (isKeyup) {\n            const singleKey = e.key;\n\n            return toggleKeys.some((keys) =>\n                keys.some((key) => key === singleKey)\n            );\n        }\n        return toggleKeys.some((keys) =>\n            keys.every((key) => combi.indexOf(key) > -1)\n        );\n    }\n    private onKeyDown = (e: any) => {\n        if (!this.sameCombiKey(e)) {\n            return;\n        }\n        this.continueSelect = true;\n        /**\n         * When you keydown the key you specified in toggleContinueSelect, the keydown event is called.\n         * @memberof Selecto\n         * @event keydown\n         * @example\n         * import Selecto from \"selecto\";\n         *\n         * const selecto = new Selecto({\n         *   container: document.body,\n         *   toggleContinueSelect: \"shift\";\n         *   keyContainer: window,\n         * });\n         *\n         * selecto.on(\"keydown\", () => {\n         *   document.querySelector(\".button\").classList.add(\"selected\");\n         * }).on(\"keyup\", () => {\n         *   document.querySelector(\".button\").classList.remove(\"selected\");\n         * }).on(\"select\", e => {\n         *   e.added.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.removed.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * });\n         */\n        this.trigger(\"keydown\", {});\n    };\n    private onKeyUp = (e: any) => {\n        if (!this.sameCombiKey(e, true)) {\n            return;\n        }\n        this.continueSelect = false;\n        /**\n         * When you keyup the key you specified in toggleContinueSelect, the keyup event is called.\n         * @memberof Selecto\n         * @event keyup\n         * @example\n         * import Selecto from \"selecto\";\n         *\n         * const selecto = new Selecto({\n         *   container: document.body,\n         *   toggleContinueSelect: \"shift\";\n         *   keyContainer: window,\n         * });\n         *\n         * selecto.on(\"keydown\", () => {\n         *   document.querySelector(\".button\").classList.add(\"selected\");\n         * }).on(\"keyup\", () => {\n         *   document.querySelector(\".button\").classList.remove(\"selected\");\n         * }).on(\"select\", e => {\n         *   e.added.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.removed.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * });\n         */\n        this.trigger(\"keyup\", {});\n    };\n    private onBlur = () => {\n        if (this.toggleContinueSelect && this.continueSelect) {\n            this.continueSelect = false;\n            this.trigger(\"keyup\", {});\n        }\n    };\n    private onDocumentSelectStart = (e: any) => {\n        if (!this.gesto.isFlag()) {\n            return;\n        }\n        let dragContainer = this.dragContainer;\n\n        if (dragContainer === window) {\n            dragContainer = document.documentElement;\n        }\n        const containers =\n            dragContainer instanceof Element\n                ? [dragContainer]\n                : ([].slice.call(dragContainer) as Element[]);\n        const target = e.target;\n\n        containers.some((container) => {\n            if (container === target || container.contains(target)) {\n                e.preventDefault();\n                return true;\n            }\n        });\n    };\n}\n\ninterface Selecto extends SelectoProperties {}\n\nexport default Selecto;\n","import SelectoManager from \"./SelectoManager\";\n\nclass Selecto extends SelectoManager {\n\n}\nexport default Selecto;\n","import Selecto, * as modules from \"./index\";\n\nfor (const name in modules) {\n    (Selecto as any)[name] = modules[name];\n}\n\nexport default Selecto;\n"],"names":["getClient","e","touch","touches","changedTouches","clientX","clientY","createElement","jsx","prevTarget","container","tag","children","attributes","className","style","el","document","name","setAttribute","elChildren","forEach","child","i","split","hasClass","addClass","elStyle","appendChild","h","attrs","_i","_a","_b","_c","diffValue","prev","cur","func","getRect","ratio","boundArea","datas","distX","distY","_d","startX","startY","nextHeight","Math","sqrt","nextWidth","width","abs","height","maxWidth","left","right","maxHeight","top","bottom","tx","min","ty","getDefaultElementRect","rect","getBoundingClientRect","pos1","pos2","pos3","pos4","passTargets","beforeTargets","afterTargets","list","prevList","added","removed","map","index","concat","injector","styled","CLASS_NAME","PROPERTIES","OPTIONS","__spreadArrays","OPTION_TYPES","boundContainer","target","dragContainer","selectableTargets","Array","selectByClick","Boolean","selectFromInside","continueSelect","toggleContinueSelect","keyContainer","hitRate","Number","scrollOptions","Object","checkInput","preventDefault","cspNonce","String","getElementRect","Function","preventDragFromInside","EVENTS","METHODS","__extends","options","_super","_this","DragScroll","clickedTarget","inputEvent","findSelectableTargets","startSelectedTargets","selectedTargets","Infinity","boundInfo","isObject","element","boundElement","rectElement","isString","querySelector","hitRect","firstPassedTargets","pointTarget","elementFromPoint","indexOf","parentElement","hasInsideTargets","length","isPreventSelect","stop","type","isTrusted","result","isClick","trigger","startPassedTargets","select","selectFlag","boundsArea","cssText","selectEnd","dragScroll","dragStart","drag","check","isDouble","isDrag","isSelect","dragEnd","sameCombiKey","gesto","isFlag","window","documentElement","containers","Element","slice","call","some","contains","body","undefined","initElement","initDragScroll","setKeyController","setKeyEvent","value","triggerDragStart","off","keycon","destroy","unset","injectResult","removeEvent","onDocumentSelectStart","info","points","fitPoints","selectableElements","push","elements","querySelectorAll","getEventDatas","getSelectableElements","selectablePoints","getElementPoints","dragEvent","onDragStart","onDragEnd","KeyController","keydown","onKeyDown","keyup","onKeyUp","on","onBlur","parentNode","Gesto","checkWindowBlur","onDrag","addEvent","inject","nonce","selectRect","targets","rectPoints","filter","_","inArea","isInside","overlapPoints","getOverlapPoints","overlapSize","getAreaSize","targetSize","rate","between","round","direction","offsetX","offsetY","pos","scrollBy","prevSelectedTargets","isStart","selected","afterAdded","afterRemoved","afterPrevList","afterList","isDragStart","passedTargets","hitTest","isKeyup","combi","getCombi","key","toggleKeys","isArray","singleKey_1","keys","every","Selecto","Properties","prototype","property","enumerable","configurable","get","setter","camelize","set","defineProperty","EventEmitter","SelectoManager","modules"],"mappings":"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"}