{"version":3,"file":"selecto.min.js","sources":["../src/utils.ts","../src/consts.ts","../src/Selecto.tsx","../src/SelectoManager.tsx","../src/index.umd.ts"],"sourcesContent":["import { Hypertext, Rect } from \"./types\";\nimport { IObject, addClass, hasClass, calculateBoundSize } from \"@daybrush/utils\";\nimport { diff } from \"@egjs/children-differ\";\n\nexport function getClient(e: MouseEvent | TouchEvent) {\n    if (\"touches\" in e) {\n        const touch = e.touches[0] || e.changedTouches[0];\n\n        return {\n            clientX: touch.clientX,\n            clientY: touch.clientY,\n        };\n    } else {\n        return {\n            clientX: e.clientX,\n            clientY: e.clientY,\n        };\n    }\n}\n\nexport function createElement(\n    jsx: Hypertext,\n    prevTarget?: HTMLElement | SVGElement,\n    container?: HTMLElement | SVGElement,\n) {\n    const { tag, children, attributes, className, style } = jsx;\n    const el = prevTarget || document.createElement(tag) as HTMLElement | SVGElement;\n\n    for (const name in attributes) {\n        el.setAttribute(name, attributes[name]);\n    }\n    const elChildren = el.children;\n    children.forEach((child, i) => {\n        createElement(child, elChildren[i] as HTMLElement | SVGElement, el);\n    });\n    if (className) {\n        className.split(\" \").forEach(name => {\n            if (!hasClass(el, name)) {\n                addClass(el, name);\n            }\n        });\n    }\n    if (style) {\n        const elStyle = el.style;\n        for (const name in style) {\n            elStyle[name] = style[name];\n        }\n    }\n    if (!prevTarget && container) {\n        container.appendChild(el);\n    }\n    return el;\n}\nexport function h(\n    tag: string,\n    attrs: IObject<any>,\n    ...children: Hypertext[]\n): Hypertext {\n    const {\n        className = \"\",\n        style = {},\n        ...attributes\n    } = attrs || {};\n    return {\n        tag,\n        className,\n        style,\n        attributes,\n        children,\n    };\n}\n\nexport function diffValue<T>(prev: T, cur: T, func: (prev: T, cur: T) => void) {\n    if (prev !== cur) {\n        func(prev, cur);\n    }\n}\n\nexport function getRect(\n    e: any, ratio: number,\n    boundArea = e.datas.boundArea,\n): Rect {\n    let {\n        distX = 0,\n        distY = 0,\n    } = e;\n    const { startX, startY } = e.datas;\n\n    if (ratio > 0) {\n        const nextHeight = Math.sqrt((distX * distX + distY * distY) / (1 + ratio * ratio));\n        const nextWidth = ratio * nextHeight;\n\n        distX = (distX >= 0 ? 1 : -1) * nextWidth;\n        distY = (distY >= 0 ? 1 : -1) * nextHeight;\n    }\n    let width = Math.abs(distX);\n    let height = Math.abs(distY);\n\n    const maxWidth = distX < 0 ? startX - boundArea.left : boundArea.right - startX;\n    const maxHeight = distY < 0 ? startY - boundArea.top : boundArea.bottom - startY;\n\n    [width, height] = calculateBoundSize([width, height], [0, 0], [maxWidth, maxHeight], !!ratio);\n    distX = (distX >= 0 ? 1 : -1) * width;\n    distY = (distY >= 0 ? 1 : -1) * height;\n\n    const tx = Math.min(0, distX);\n    const ty = Math.min(0, distY);\n    const left = startX + tx;\n    const top = startY + ty;\n\n    return {\n        left,\n        top,\n        right: left + width,\n        bottom: top + height,\n        width,\n        height,\n    };\n}\n\nexport function getDefaultElementRect(el: HTMLElement | SVGElement) {\n    const rect = el.getBoundingClientRect();\n    const { left, top, width, height } = rect;\n\n    return {\n        pos1: [left, top],\n        pos2: [left + width, top],\n        pos3: [left, top + height],\n        pos4: [left + width, top + height],\n    };\n}\n\nexport function passTargets(\n    beforeTargets: Array<HTMLElement | SVGElement>,\n    afterTargets: Array<HTMLElement | SVGElement>,\n) {\n    const {\n        list,\n        prevList,\n        added,\n        removed,\n    } = diff(beforeTargets, afterTargets);\n\n    return added.map(index => list[index]).concat(removed.map(index => prevList[index]));\n}\n","import styled from \"css-styled\";\nimport { SelectoOptions } from \"./types\";\n\nexport const injector = styled(`\n:host {\n    position: fixed;\n    display: none;\n    border: 1px solid #4af;\n    background: rgba(68, 170, 255, 0.5);\n    z-index: 100;\n}\n`);\n\n/**\n * @memberof Selecto\n */\nexport const CLASS_NAME = `selecto-selection ${injector.className}`;\n\nexport const PROPERTIES = [\n    \"boundContainer\",\n    \"selectableTargets\",\n    \"selectByClick\",\n    \"selectFromInside\",\n    \"continueSelect\",\n    \"toggleContinueSelect\",\n    \"keyContainer\",\n    \"hitRate\",\n    \"scrollOptions\",\n    \"checkInput\",\n    \"preventDefault\",\n    \"ratio\",\n    \"getElementRect\",\n    \"preventDragFromInside\",\n] as const;\n/**\n * @memberof Selecto\n */\nexport const OPTIONS = [\n    // ignore target, container,\n    \"dragContainer\",\n    \"cspNonce\",\n    ...PROPERTIES,\n] as const;\n\nexport const OPTION_TYPES: { [key in keyof SelectoOptions]: any } = {\n    boundContainer: null,\n    target: null,\n    container: null,\n    dragContainer: null,\n    selectableTargets: Array,\n    selectByClick: Boolean,\n    selectFromInside: Boolean,\n    continueSelect: Boolean,\n    toggleContinueSelect: Array,\n    keyContainer: null,\n    hitRate: Number,\n    scrollOptions: Object,\n    checkInput: Boolean,\n    preventDefault: Boolean,\n    cspNonce: String,\n    ratio: Number,\n    getElementRect: Function,\n    preventDragFromInside: Boolean,\n};\n\n/**\n * @memberof Selecto\n */\nexport const EVENTS = [\n    \"dragStart\",\n    \"drag\",\n    \"dragEnd\",\n    \"selectStart\",\n    \"select\",\n    \"selectEnd\",\n    \"keydown\",\n    \"keyup\",\n    \"scroll\",\n] as const;\n\n/**\n * @memberof Selecto\n */\nexport const METHODS = [\n    \"clickTarget\",\n    \"getSelectableElements\",\n    \"setSelectedTargets\",\n    \"getElementPoints\",\n    \"getSelectedTargets\",\n    \"findSelectableTargets\",\n    \"triggerDragStart\",\n] as const;\n","import SelectoManager from \"./SelectoManager\";\n\nclass Selecto extends SelectoManager {\n\n}\nexport default Selecto;\n","import EventEmitter from \"@scena/event-emitter\";\nimport Gesto, { OnDrag, OnDragStart } from \"gesto\";\nimport { InjectResult } from \"css-styled\";\nimport { Properties } from \"framework-utils\";\nimport {\n    isObject,\n    camelize,\n    IObject,\n    addEvent,\n    removeEvent,\n    isArray,\n    isString,\n    between,\n} from \"@daybrush/utils\";\nimport { diff } from \"@egjs/children-differ\";\nimport DragScroll from \"@scena/dragscroll\";\nimport KeyController, { getCombi } from \"keycon\";\nimport {\n    getAreaSize,\n    getOverlapPoints,\n    isInside,\n    fitPoints,\n} from \"overlap-area\";\nimport {\n    createElement,\n    h,\n    getClient,\n    diffValue,\n    getRect,\n    getDefaultElementRect,\n    passTargets,\n} from \"./utils\";\nimport {\n    SelectoOptions,\n    SelectoProperties,\n    OnDragEvent,\n    SelectoEvents,\n    Rect,\n    BoundContainer,\n} from \"./types\";\nimport { PROPERTIES, injector, CLASS_NAME } from \"./consts\";\n\n/**\n * Selecto.js is a component that allows you to select elements in the drag area using the mouse or touch.\n * @sort 1\n * @extends EventEmitter\n */\n@Properties(PROPERTIES as any, (prototype, property) => {\n    const attributes: IObject<any> = {\n        enumerable: true,\n        configurable: true,\n        get() {\n            return this.options[property];\n        },\n    };\n    const setter = camelize(`set ${property}`);\n    if (prototype[setter]) {\n        attributes.set = function set(value) {\n            this[setter](value);\n        };\n    } else {\n        attributes.set = function set(value) {\n            this.options[property] = value;\n        };\n    }\n    Object.defineProperty(prototype, property, attributes);\n})\nclass Selecto extends EventEmitter<SelectoEvents> {\n    public options: SelectoOptions;\n    private target!: HTMLElement | SVGElement;\n    private dragContainer!: Element | Window | Element[];\n    private container!: HTMLElement;\n    private gesto!: Gesto;\n    private injectResult!: InjectResult;\n    private selectedTargets: Array<HTMLElement | SVGElement> = [];\n    private dragScroll: DragScroll = new DragScroll();\n    private keycon!: KeyController;\n    /**\n     *\n     */\n    constructor(options: Partial<SelectoOptions> = {}) {\n        super();\n        this.target = options.target;\n        this.container = options.container || document.body;\n        this.options = {\n            target: null,\n            container: null,\n            dragContainer: null,\n            selectableTargets: [],\n            selectByClick: true,\n            selectFromInside: true,\n            hitRate: 100,\n            continueSelect: false,\n            toggleContinueSelect: null,\n            keyContainer: null,\n            scrollOptions: undefined,\n            checkInput: false,\n            preventDefault: false,\n            boundContainer: false,\n            preventDragFromInside: true,\n            getElementRect: getDefaultElementRect,\n            cspNonce: \"\",\n            ratio: 0,\n            ...options,\n        };\n        this.initElement();\n        this.initDragScroll();\n        this.setKeyController();\n    }\n    /**\n     * You can set the currently selected targets.\n     *\n     */\n    public setSelectedTargets(\n        selectedTargets: Array<HTMLElement | SVGElement>\n    ): this {\n        this.selectedTargets = selectedTargets;\n\n        return this;\n    }\n    /**\n     * You can get the currently selected targets.\n     */\n    public getSelectedTargets(): Array<HTMLElement | SVGElement> {\n        return this.selectedTargets;\n    }\n    public setKeyContainer(keyContainer: HTMLElement | Document | Window) {\n        const options = this.options;\n\n        diffValue(options.keyContainer, keyContainer, () => {\n            options.keyContainer = keyContainer;\n\n            this.setKeyController();\n        });\n    }\n    public setToggleContinueSelect(\n        toggleContinueSelect: string[][] | string[] | string\n    ) {\n        const options = this.options;\n\n        diffValue(options.toggleContinueSelect, toggleContinueSelect, () => {\n            options.toggleContinueSelect = toggleContinueSelect;\n\n            this.setKeyEvent();\n        });\n    }\n    public setPreventDefault(value: boolean) {\n        this.gesto.options.preventDefault = value;\n    }\n    public setCheckInput(value: boolean) {\n        this.gesto.options.checkInput = value;\n    }\n    /**\n     * `OnDragStart` is triggered by an external event.\n     * @param - external event\n     * @example\n     * import Selecto from \"selecto\";\n     *\n     * const selecto = new Selecto();\n     *\n     * window.addEventListener(\"mousedown\", e => {\n     *   selecto.triggerDragStart(e);\n     * });\n     */\n    public triggerDragStart(e: MouseEvent | TouchEvent) {\n        this.gesto.triggerDragStart(e);\n        return this;\n    }\n    /**\n     * Destroy elements, properties, and events.\n     */\n    public destroy(): void {\n        this.off();\n        this.keycon && this.keycon.destroy();\n        this.gesto.unset();\n        this.injectResult.destroy();\n        removeEvent(document, \"selectstart\", this.onDocumentSelectStart);\n\n        this.keycon = null;\n        this.gesto = null;\n        this.injectResult = null;\n        this.target = null;\n        this.container = null;\n        this.options = null;\n    }\n    public getElementPoints(target: HTMLElement | SVGElement) {\n        const getElementRect = this.getElementRect || getDefaultElementRect;\n        const info = getElementRect(target);\n        const points = [info.pos1, info.pos2, info.pos4, info.pos3];\n\n        if (getElementRect !== getDefaultElementRect) {\n            const rect = target.getBoundingClientRect();\n\n            return fitPoints(points, rect);\n        }\n        return points;\n    }\n    /**\n     * Get all elements set in `selectableTargets`.\n     */\n    public getSelectableElements() {\n        const selectableElements: Array<HTMLElement | SVGElement> = [];\n\n        this.options.selectableTargets.forEach((target) => {\n            if (isObject(target)) {\n                selectableElements.push(target);\n            } else {\n                const elements = [].slice.call(\n                    document.querySelectorAll(target)\n                );\n\n                elements.forEach((el) => {\n                    selectableElements.push(el);\n                });\n            }\n        });\n\n        return selectableElements;\n    }\n    /**\n     * Find for selectableTargets again during drag event\n     */\n    public findSelectableTargets(datas: any = this.gesto.getEventDatas()) {\n        const selectableTargets = this.getSelectableElements();\n        const selectablePoints = selectableTargets.map((target) =>\n            this.getElementPoints(target)\n        );\n        datas.selectableTargets = selectableTargets;\n        datas.selectablePoints = selectablePoints;\n    }\n    /**\n     * External click or mouse events can be applied to the selecto.\n     * @params - Extenal click or mouse event\n     * @params - Specify the clicked target directly.\n     */\n    public clickTarget(\n        e: MouseEvent | TouchEvent,\n        clickedTarget?: Element\n    ): this {\n        const { clientX, clientY } = getClient(e);\n        const dragEvent = {\n            datas: {\n                selectFlag: false,\n            },\n            clientX,\n            clientY,\n            inputEvent: e,\n            isClick: true,\n            stop: () => {\n                return false;\n            },\n        } as any;\n        if (this.onDragStart(dragEvent, clickedTarget)) {\n            this.onDragEnd(dragEvent);\n        }\n        return this;\n    }\n    private setKeyController() {\n        const { keyContainer, toggleContinueSelect } = this.options;\n\n        if (this.keycon) {\n            this.keycon.destroy();\n            this.keycon = null;\n        }\n        if (toggleContinueSelect) {\n            this.keycon = new KeyController(keyContainer || window);\n            this.keycon\n                .keydown(this.onKeyDown)\n                .keyup(this.onKeyUp)\n                .on(\"blur\", this.onBlur);\n        }\n    }\n    private setKeyEvent() {\n        const { toggleContinueSelect } = this.options;\n        if (!toggleContinueSelect || this.keycon) {\n            return;\n        }\n        this.setKeyController();\n    }\n    private initElement() {\n        this.target = createElement(\n            (<div className={CLASS_NAME}></div>) as any,\n            this.target,\n            this.container\n        );\n\n        const target = this.target;\n\n        const { dragContainer, checkInput, preventDefault } = this.options;\n        this.dragContainer =\n            typeof dragContainer === \"string\"\n                ? [].slice.call(document.querySelectorAll(dragContainer))\n                : this.options.dragContainer || (this.target.parentNode as any);\n        this.gesto = new Gesto(this.dragContainer, {\n            checkWindowBlur: true,\n            container: window,\n            checkInput,\n            preventDefault,\n        }).on({\n            dragStart: this.onDragStart,\n            drag: this.onDrag,\n            dragEnd: this.onDragEnd,\n        });\n        addEvent(document, \"selectstart\", this.onDocumentSelectStart);\n\n        this.injectResult = injector.inject(target, {\n            nonce: this.options.cspNonce,\n        });\n    }\n    private hitTest(\n        selectRect: Rect,\n        clientX: number,\n        clientY: number,\n        targets: Array<HTMLElement | SVGElement>,\n        selectablePoints: number[][][]\n    ) {\n        const { hitRate, selectByClick } = this.options;\n        const { left, top, right, bottom } = selectRect;\n        const rectPoints = [\n            [left, top],\n            [right, top],\n            [right, bottom],\n            [left, bottom],\n        ];\n        return targets.filter((_, i) => {\n            const points = selectablePoints[i];\n            const inArea = isInside([clientX, clientY], points);\n\n            if (selectByClick && inArea) {\n                return true;\n            }\n            const overlapPoints = getOverlapPoints(rectPoints, points);\n\n            if (!overlapPoints.length) {\n                return false;\n            }\n            const overlapSize = getAreaSize(overlapPoints);\n            const targetSize = getAreaSize(points);\n            const rate = between(\n                Math.round((overlapSize / targetSize) * 100),\n                0,\n                100\n            );\n\n            if (rate >= Math.min(100, hitRate)) {\n                return true;\n            }\n            return false;\n        });\n    }\n    private initDragScroll() {\n        this.dragScroll\n            .on(\"scroll\", ({ container, direction }) => {\n                this.trigger(\"scroll\", {\n                    container,\n                    direction,\n                });\n            })\n            .on(\"move\", ({ offsetX, offsetY, inputEvent }) => {\n                const datas = inputEvent.datas;\n                datas.startX -= offsetX;\n                datas.startY -= offsetY;\n                datas.selectablePoints.forEach((points: number[][]) => {\n                    points.forEach((pos) => {\n                        pos[0] -= offsetX;\n                        pos[1] -= offsetY;\n                    });\n                });\n                this.gesto.scrollBy(\n                    offsetX,\n                    offsetY,\n                    inputEvent.inputEvent,\n                    false\n                );\n\n                inputEvent.distX += offsetX;\n                inputEvent.distY += offsetY;\n                this.check(inputEvent);\n            });\n    }\n    private select(\n        prevSelectedTargets: Array<HTMLElement | SVGElement>,\n        selectedTargets: Array<HTMLElement | SVGElement>,\n        rect: Rect,\n        inputEvent: any,\n        isStart?: boolean\n    ) {\n        const { added, removed, prevList, list } = diff(\n            prevSelectedTargets,\n            selectedTargets\n        );\n\n        this.selectedTargets = selectedTargets;\n\n        if (isStart) {\n            /**\n             * When the select(drag) starts, the selectStart event is called.\n             * @memberof Selecto\n             * @event selectStart\n             * @param {Selecto.OnSelect} - Parameters for the selectStart event\n             * @example\n             * import Selecto from \"selecto\";\n             *\n             * const selecto = new Selecto({\n             *   container: document.body,\n             *   selectByClick: true,\n             *   selectFromInside: false,\n             * });\n             *\n             * selecto.on(\"selectStart\", e => {\n             *   e.added.forEach(el => {\n             *     el.classList.add(\"selected\");\n             *   });\n             *   e.removed.forEach(el => {\n             *     el.classList.remove(\"selected\");\n             *   });\n             * }).on(\"selectEnd\", e => {\n             *   e.afterAdded.forEach(el => {\n             *     el.classList.add(\"selected\");\n             *   });\n             *   e.afterRemoved.forEach(el => {\n             *     el.classList.remove(\"selected\");\n             *   });\n             * });\n             */\n            this.trigger(\"selectStart\", {\n                selected: selectedTargets,\n                added: added.map((index) => list[index]),\n                removed: removed.map((index) => prevList[index]),\n                rect,\n                inputEvent,\n            });\n        }\n        if (added.length || removed.length) {\n            /**\n             * When the select in real time, the select event is called.\n             * @memberof Selecto\n             * @event select\n             * @param {Selecto.OnSelect} - Parameters for the select event\n             * @example\n             * import Selecto from \"selecto\";\n             *\n             * const selecto = new Selecto({\n             *   container: document.body,\n             *   selectByClick: true,\n             *   selectFromInside: false,\n             * });\n             *\n             * selecto.on(\"select\", e => {\n             *   e.added.forEach(el => {\n             *     el.classList.add(\"selected\");\n             *   });\n             *   e.removed.forEach(el => {\n             *     el.classList.remove(\"selected\");\n             *   });\n             * });\n             */\n            this.trigger(\"select\", {\n                selected: selectedTargets,\n                added: added.map((index) => list[index]),\n                removed: removed.map((index) => prevList[index]),\n                rect,\n                inputEvent,\n            });\n        }\n    }\n    private selectEnd(\n        startSelectedTargets: Array<HTMLElement | SVGElement>,\n        startPassedTargets: Array<HTMLElement | SVGElement>,\n        rect: Rect,\n        e: OnDragEvent\n    ) {\n        const { inputEvent, isDouble } = e;\n        const { added, removed, prevList, list } = diff(\n            startSelectedTargets,\n            this.selectedTargets\n        );\n        const {\n            added: afterAdded,\n            removed: afterRemoved,\n            prevList: afterPrevList,\n            list: afterList,\n        } = diff(startPassedTargets, this.selectedTargets);\n        const type = inputEvent && inputEvent.type;\n        const isDragStart = type === \"mousedown\" || type === \"touchstart\";\n\n        /**\n         * When the select(dragEnd or click) ends, the selectEnd event is called.\n         * @memberof Selecto\n         * @event selectEnd\n         * @param {Selecto.OnSelectEnd} - Parameters for the selectEnd event\n         * @example\n         * import Selecto from \"selecto\";\n         *\n         * const selecto = new Selecto({\n         *   container: document.body,\n         *   selectByClick: true,\n         *   selectFromInside: false,\n         * });\n         *\n         * selecto.on(\"selectStart\", e => {\n         *   e.added.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.removed.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * }).on(\"selectEnd\", e => {\n         *   e.afterAdded.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.afterRemoved.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * });\n         */\n        this.trigger(\"selectEnd\", {\n            selected: this.selectedTargets,\n            added: added.map((index) => list[index]),\n            removed: removed.map((index) => prevList[index]),\n            afterAdded: afterAdded.map((index) => afterList[index]),\n            afterRemoved: afterRemoved.map((index) => afterPrevList[index]),\n            isDragStart,\n            isDouble: !!isDouble,\n            rect,\n            inputEvent,\n        });\n    }\n    private onDragStart = (e: OnDragStart, clickedTarget?: Element) => {\n        const { datas, clientX, clientY, inputEvent } = e;\n        const {\n            continueSelect,\n            selectFromInside,\n            selectByClick,\n            boundContainer,\n            preventDragFromInside = true,\n        } = this.options;\n\n        this.findSelectableTargets(datas);\n        datas.startSelectedTargets = this.selectedTargets;\n\n        let boundArea = {\n            left: -Infinity,\n            top: -Infinity,\n            right: Infinity,\n            bottom: Infinity,\n        };\n\n        if (boundContainer) {\n            const boundInfo: Required<BoundContainer> =\n                isObject(boundContainer) && \"element\" in boundContainer\n                    ? {\n                          left: true,\n                          top: true,\n                          bottom: true,\n                          right: true,\n                          ...boundContainer,\n                      }\n                    : {\n                          element: boundContainer,\n                          left: true,\n                          top: true,\n                          bottom: true,\n                          right: true,\n                      };\n            const boundElement = boundInfo.element;\n            let rectElement: HTMLElement;\n\n            if (boundElement) {\n                if (isString(boundElement)) {\n                    rectElement = document.querySelector(boundElement);\n                } else if (boundElement === true) {\n                    rectElement = this.container;\n                } else {\n                    rectElement = boundElement;\n                }\n                const rect = rectElement.getBoundingClientRect();\n\n                if (boundInfo.left) {\n                    boundArea.left = rect.left;\n                }\n                if (boundInfo.top) {\n                    boundArea.top = rect.top;\n                }\n                if (boundInfo.right) {\n                    boundArea.right = rect.right;\n                }\n                if (boundInfo.bottom) {\n                    boundArea.bottom = rect.bottom;\n                }\n            }\n        }\n\n        datas.boundArea = boundArea;\n\n        const hitRect = {\n            left: clientX,\n            top: clientY,\n            right: clientX,\n            bottom: clientY,\n            width: 0,\n            height: 0,\n        };\n        let firstPassedTargets: Array<HTMLElement | SVGElement> = [];\n        if (!selectFromInside || selectByClick) {\n            let pointTarget = (clickedTarget ||\n                document.elementFromPoint(clientX, clientY)) as\n                | HTMLElement\n                | SVGElement;\n\n            while (pointTarget) {\n                if (\n                    datas.selectableTargets.indexOf(\n                        pointTarget as HTMLElement | SVGElement\n                    ) > -1\n                ) {\n                    break;\n                }\n                pointTarget = pointTarget.parentElement;\n            }\n            firstPassedTargets = pointTarget ? [pointTarget] : [];\n        }\n        const hasInsideTargets = firstPassedTargets.length > 0;\n        const isPreventSelect = !selectFromInside && hasInsideTargets;\n\n        if (isPreventSelect && !selectByClick) {\n            e.stop();\n            return false;\n        }\n        const type = inputEvent.type;\n        const isTrusted = type === \"mousedown\" || type === \"touchstart\";\n        /**\n         * When the drag starts, the dragStart event is called.\n         * Call the stop () function if you have a specific element or don't want to raise a select\n         * @memberof Selecto\n         * @event dragStart\n         * @param {OnDragStart} - Parameters for the dragStart event\n         * @example\n         * import Selecto from \"selecto\";\n         *\n         * const selecto = new Selecto({\n         *   container: document.body,\n         *   selectByClick: true,\n         *   selectFromInside: false,\n         * });\n         *\n         * selecto.on(\"dragStart\", e => {\n         *   if (e.inputEvent.target.tagName === \"SPAN\") {\n         *     e.stop();\n         *   }\n         * }).on(\"select\", e => {\n         *   e.added.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.removed.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * });\n         */\n        const result =\n            !(e as any).isClick && isTrusted\n                ? this.trigger(\"dragStart\", { ...e })\n                : true;\n\n        if (!result) {\n            e.stop();\n            return false;\n        }\n\n        if (!continueSelect) {\n            datas.startPassedTargets = [];\n        } else {\n            firstPassedTargets = passTargets(\n                this.selectedTargets,\n                firstPassedTargets\n            );\n            datas.startPassedTargets = this.selectedTargets;\n        }\n        this.select(\n            this.selectedTargets,\n            firstPassedTargets,\n            hitRect,\n            inputEvent,\n            true\n        );\n        datas.startX = clientX;\n        datas.startY = clientY;\n        datas.selectFlag = false;\n        datas.preventDragFromInside = false;\n        datas.boundsArea = this.target.style.cssText += `left:0px;top:0px;transform: translate(${clientX}px, ${clientY}px)`;\n\n        if (isPreventSelect && selectByClick) {\n            inputEvent.preventDefault();\n\n            if (preventDragFromInside) {\n                this.selectEnd(\n                    datas.startSelectedTargets,\n                    datas.startPassedTargets,\n                    hitRect,\n                    e\n                );\n                datas.preventDragFromInside = true;\n            }\n        } else {\n            datas.selectFlag = true;\n            if (type === \"touchstart\") {\n                inputEvent.preventDefault();\n            }\n            const { scrollOptions } = this.options;\n            if (scrollOptions && scrollOptions.container) {\n                this.dragScroll.dragStart(e, scrollOptions);\n            }\n        }\n        return true;\n    };\n    private check(e: any, rect = getRect(e, this.options.ratio)) {\n        const { datas, inputEvent } = e;\n        const { top, left, width, height } = rect;\n        const selectFlag = datas.selectFlag;\n        let prevSelectedTargets: Array<HTMLElement | SVGElement> = [];\n        let selectedTargets: Array<HTMLElement | SVGElement> = [];\n        if (selectFlag) {\n            this.target.style.cssText +=\n                `display: block;` +\n                `left:0px;top:0px;` +\n                `transform: translate(${left}px, ${top}px);` +\n                `width:${width}px;height:${height}px;`;\n\n            const passedTargets = this.hitTest(\n                rect,\n                datas.startX,\n                datas.startY,\n                datas.selectableTargets,\n                datas.selectablePoints\n            );\n            prevSelectedTargets = this.selectedTargets;\n            selectedTargets = passTargets(\n                datas.startPassedTargets,\n                passedTargets\n            );\n\n            this.selectedTargets = selectedTargets;\n        }\n\n        this.trigger(\"drag\", {\n            ...e,\n            isSelect: selectFlag,\n            rect,\n        });\n\n        if (selectFlag) {\n            this.select(prevSelectedTargets, selectedTargets, rect, inputEvent);\n        }\n    }\n    private onDrag = (e: OnDrag) => {\n        if (e.datas.selectFlag) {\n            const { scrollOptions } = this.options;\n            if (scrollOptions && scrollOptions.container) {\n                if (this.dragScroll.drag(e, scrollOptions)) {\n                    return;\n                }\n            }\n        }\n        this.check(e);\n    };\n    private onDragEnd = (e: OnDragEvent) => {\n        const { datas, inputEvent } = e;\n        const rect = getRect(e, this.options.ratio);\n        const selectFlag = datas.selectFlag;\n\n        if (inputEvent && !e.isClick) {\n            this.trigger(\"dragEnd\", {\n                isDouble: !!e.isDouble,\n                isDrag: false,\n                isSelect: selectFlag,\n                ...e,\n                rect,\n            });\n        }\n        this.target.style.cssText += \"display: none;\";\n        if (selectFlag) {\n            datas.selectFlag = false;\n            this.dragScroll.dragEnd();\n        }\n        if (!datas.preventDragFromInside) {\n            this.selectEnd(\n                datas.startSelectedTargets,\n                datas.startPassedTargets,\n                rect,\n                e\n            );\n        }\n    };\n    private sameCombiKey(e: any, isKeyup?: boolean) {\n        const toggleContinueSelect = [].concat(\n            this.options.toggleContinueSelect\n        );\n        const combi = getCombi(e.inputEvent, e.key);\n        const toggleKeys = isArray(toggleContinueSelect[0])\n            ? toggleContinueSelect\n            : [toggleContinueSelect];\n\n        if (isKeyup) {\n            const singleKey = e.key;\n\n            return toggleKeys.some((keys) =>\n                keys.some((key) => key === singleKey)\n            );\n        }\n        return toggleKeys.some((keys) =>\n            keys.every((key) => combi.indexOf(key) > -1)\n        );\n    }\n    private onKeyDown = (e: any) => {\n        if (!this.sameCombiKey(e)) {\n            return;\n        }\n        this.continueSelect = true;\n        /**\n         * When you keydown the key you specified in toggleContinueSelect, the keydown event is called.\n         * @memberof Selecto\n         * @event keydown\n         * @example\n         * import Selecto from \"selecto\";\n         *\n         * const selecto = new Selecto({\n         *   container: document.body,\n         *   toggleContinueSelect: \"shift\";\n         *   keyContainer: window,\n         * });\n         *\n         * selecto.on(\"keydown\", () => {\n         *   document.querySelector(\".button\").classList.add(\"selected\");\n         * }).on(\"keyup\", () => {\n         *   document.querySelector(\".button\").classList.remove(\"selected\");\n         * }).on(\"select\", e => {\n         *   e.added.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.removed.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * });\n         */\n        this.trigger(\"keydown\", {});\n    };\n    private onKeyUp = (e: any) => {\n        if (!this.sameCombiKey(e, true)) {\n            return;\n        }\n        this.continueSelect = false;\n        /**\n         * When you keyup the key you specified in toggleContinueSelect, the keyup event is called.\n         * @memberof Selecto\n         * @event keyup\n         * @example\n         * import Selecto from \"selecto\";\n         *\n         * const selecto = new Selecto({\n         *   container: document.body,\n         *   toggleContinueSelect: \"shift\";\n         *   keyContainer: window,\n         * });\n         *\n         * selecto.on(\"keydown\", () => {\n         *   document.querySelector(\".button\").classList.add(\"selected\");\n         * }).on(\"keyup\", () => {\n         *   document.querySelector(\".button\").classList.remove(\"selected\");\n         * }).on(\"select\", e => {\n         *   e.added.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.removed.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * });\n         */\n        this.trigger(\"keyup\", {});\n    };\n    private onBlur = () => {\n        if (this.toggleContinueSelect && this.continueSelect) {\n            this.continueSelect = false;\n            this.trigger(\"keyup\", {});\n        }\n    };\n    private onDocumentSelectStart = (e: any) => {\n        if (!this.gesto.isFlag()) {\n            return;\n        }\n        let dragContainer = this.dragContainer;\n\n        if (dragContainer === window) {\n            dragContainer = document.documentElement;\n        }\n        const containers =\n            dragContainer instanceof Element\n                ? [dragContainer]\n                : ([].slice.call(dragContainer) as Element[]);\n        const target = e.target;\n\n        containers.some((container) => {\n            if (container === target || container.contains(target)) {\n                e.preventDefault();\n                return true;\n            }\n        });\n    };\n}\n\ninterface Selecto extends SelectoProperties {}\n\nexport default Selecto;\n","import Selecto, * as modules from \"./index\";\n\nfor (const name in modules) {\n    (Selecto as any)[name] = modules[name];\n}\n\nexport default Selecto;\n"],"names":["createElement","jsx","prevTarget","container","tag","children","attributes","className","style","el","document","name","setAttribute","elChildren","forEach","child","i","split","elStyle","appendChild","h","attrs","_i","_a","_b","_c","diffValue","prev","cur","func","getRect","e","ratio","boundArea","datas","distX","distY","_d","startX","startY","nextHeight","Math","sqrt","width","abs","height","left","right","top","bottom","min","getDefaultElementRect","rect","getBoundingClientRect","pos1","pos2","pos3","pos4","passTargets","beforeTargets","afterTargets","list","prevList","added","removed","map","index","concat","injector","CLASS_NAME","PROPERTIES","OPTIONS","__spreadArrays","OPTION_TYPES","boundContainer","target","dragContainer","selectableTargets","Array","selectByClick","Boolean","selectFromInside","continueSelect","toggleContinueSelect","keyContainer","hitRate","Number","scrollOptions","Object","checkInput","preventDefault","cspNonce","String","getElementRect","Function","preventDragFromInside","__extends","options","_super","_this","DragScroll","clickedTarget","clientX","clientY","inputEvent","findSelectableTargets","startSelectedTargets","selectedTargets","Infinity","boundInfo","isObject","element","boundElement","querySelector","hitRect","firstPassedTargets","pointTarget","elementFromPoint","indexOf","parentElement","hasInsideTargets","length","isPreventSelect","stop","type","isTrusted","isClick","trigger","startPassedTargets","select","selectFlag","boundsArea","cssText","selectEnd","dragScroll","dragStart","drag","check","isDouble","isDrag","isSelect","dragEnd","sameCombiKey","gesto","isFlag","window","documentElement","containers","Element","slice","call","some","contains","body","undefined","initElement","initDragScroll","setKeyController","this","setKeyEvent","value","triggerDragStart","off","keycon","destroy","unset","injectResult","removeEvent","onDocumentSelectStart","info","points","selectableElements","push","querySelectorAll","getEventDatas","getSelectableElements","selectablePoints","getElementPoints","touch","touches","changedTouches","dragEvent","onDragStart","onDragEnd","KeyController","keydown","onKeyDown","keyup","onKeyUp","on","onBlur","parentNode","Gesto","checkWindowBlur","onDrag","addEvent","inject","nonce","selectRect","targets","rectPoints","filter","_","inArea","isInside","overlapPoints","getOverlapPoints","overlapSize","getAreaSize","targetSize","between","round","direction","offsetX","offsetY","pos","scrollBy","prevSelectedTargets","isStart","selected","afterAdded","afterRemoved","afterPrevList","afterList","isDragStart","passedTargets","hitTest","isKeyup","combi","getCombi","key","toggleKeys","singleKey_1","keys","every","Selecto","prototype","property","enumerable","configurable","get","setter","set","defineProperty","EventEmitter","modules"],"mappings":";;;;;;;;4rvBAoBgBA,GACZC,EACAC,EACAC,OAEQC,QAAKC,aAAUC,eAAYC,cAAWC,UACxCC,EAAKP,GAAcQ,SAASV,cAAcI,OAE3C,IAAMO,KAAQL,EACfG,EAAGG,aAAaD,EAAML,EAAWK,QAE/BE,EAAaJ,EAAGJ,YACtBA,EAASS,QAAQ,SAACC,EAAOC,GACrBhB,GAAce,EAAOF,EAAWG,GAAgCP,KAEhEF,GACAA,EAAUU,MAAM,KAAKH,QAAQ,SAAAH,iBACPA,MAAJF,+FACGE,KAAJF,sDAIjBD,EAAO,KACDU,EAAUT,EAAGD,UACd,IAAMG,KAAQH,EACfU,EAAQP,GAAQH,EAAMG,UAGzBT,GAAcC,GACfA,EAAUgB,YAAYV,GAEnBA,WAEKW,GACZhB,EACAiB,oBACAC,mBAAAA,IAAAjB,wBAEMkB,QACFC,cACAC,gBAGG,CACHrB,MACAG,0BACAC,sBACAF,8WACAD,qBAIQqB,GAAaC,EAASC,EAAQC,GACtCF,IAASC,GACTC,EAAKF,EAAMC,YAIHE,GACZC,EAAQC,EACRC,sBAAAA,EAAYF,EAAEG,MAAMD,eAGhBT,UAAAW,iBACAV,UAAAW,iBAEEC,UAAEC,WAAQC,cAEJ,EAARP,EAAW,KACLQ,EAAaC,KAAKC,MAAMP,EAAQA,EAAQC,EAAQA,IAAU,EAAIJ,EAAQA,IAG5EG,GAAkB,GAATA,EAAa,GAAK,IAFTH,EAAQQ,GAG1BJ,GAAkB,GAATA,EAAa,GAAK,GAAKI,MAEhCG,EAAQF,KAAKG,IAAIT,GACjBU,EAASJ,KAAKG,IAAIR,GAMtBD,GAAkB,GAATA,EAAa,GAAK,IAD1BQ,GAADpB,uNAHiBY,EAAQ,EAAIG,EAASL,EAAUa,KAAOb,EAAUc,MAAQT,EACvDF,EAAQ,EAAIG,EAASN,EAAUe,IAAMf,EAAUgB,OAASV,aAI1EH,GAAkB,GAATA,EAAa,GAAK,IAFnBS,YAMFC,EAAOR,EAFFG,KAAKS,IAAI,EAAGf,GAGjBa,EAAMT,EAFDE,KAAKS,IAAI,EAAGd,SAIhB,CACHU,OACAE,MACAD,MAAOD,EAAOH,EACdM,OAAQD,EAAMH,EACdF,QACAE,mBAIQM,GAAsB1C,OAC5B2C,EAAO3C,EAAG4C,wBACRP,SAAME,QAAKL,UAAOE,iBAEnB,CACHS,KAAM,CAACR,EAAME,GACbO,KAAM,CAACT,EAAOH,EAAOK,GACrBQ,KAAM,CAACV,EAAME,EAAMH,GACnBY,KAAM,CAACX,EAAOH,EAAOK,EAAMH,aAInBa,GACZC,EACAC,OAEMrC,SACFsC,SACAC,aACAC,UACAC,mBAGGD,EAAME,IAAI,SAAAC,UAASL,EAAKK,KAAQC,OAAOH,EAAQC,IAAI,SAAAC,UAASJ,EAASI,ijBC5IzE,gBAAME,gGAAkB,+eAalBC,GAAa,qBAAqBD,GAAS7D,UAE3C+D,GAAa,CACtB,iBACA,oBACA,gBACA,mBACA,iBACA,uBACA,eACA,UACA,gBACA,aACA,iBACA,QACA,iBACA,yBAKSC,wLAAUC,EAEnB,gBACA,YACGF,IAGMG,GAAuD,CAChEC,eAAgB,KAChBC,OAAQ,KACRxE,UAAW,KACXyE,cAAe,KACfC,kBAAmBC,MACnBC,cAAeC,QACfC,iBAAkBD,QAClBE,eAAgBF,QAChBG,qBAAsBL,MACtBM,aAAc,KACdC,QAASC,OACTC,cAAeC,OACfC,WAAYT,QACZU,eAAgBV,QAChBW,SAAUC,OACV5D,MAAOsD,OACPO,eAAgBC,SAChBC,sBAAuBf,2FC5DLgB,iCC8ENC,gBAAAA,YACRC,0BAPIC,kBAAmD,GACnDA,aAAyB,IAAIC,EAqc7BD,cAAc,SAACpE,EAAgBsE,OAC3BnE,UAAOoE,YAASC,YAASC,eAC3BjF,YACF2D,mBACAD,qBACAF,kBACAL,mBACAlD,0BAAAuE,gBAGJI,EAAKM,sBAAsBvE,GAC3BA,EAAMwE,qBAAuBP,EAAKQ,oBAE9B1E,EAAY,CACZa,MAAO8D,EAAAA,EACP5D,KAAM4D,EAAAA,EACN7D,MAAO6D,EAAAA,EACP3D,OAAQ2D,EAAAA,MAGRlC,EAAgB,KACVmC,EACFC,EAASpC,IAAmB,YAAaA,KAE/B5B,MAAM,EACNE,KAAK,EACLC,QAAQ,EACRF,OAAO,GACJ2B,GAEP,CACIqC,QAASrC,EACT5B,MAAM,EACNE,KAAK,EACLC,QAAQ,EACRF,OAAO,GAEfiE,EAAeH,EAAUE,WAG3BC,EAAc,KAQR5D,UAPO4D,MACKtG,SAASuG,cAAcD,IACb,IAAjBA,EACOb,EAAKhG,UAEL6G,GAEO3D,wBAErBwD,EAAU/D,OACVb,EAAUa,KAAOM,EAAKN,MAEtB+D,EAAU7D,MACVf,EAAUe,IAAMI,EAAKJ,KAErB6D,EAAU9D,QACVd,EAAUc,MAAQK,EAAKL,OAEvB8D,EAAU5D,SACVhB,EAAUgB,OAASG,EAAKH,SAKpCf,EAAMD,UAAYA,MAEZiF,EAAU,CACZpE,KAAMwD,EACNtD,IAAKuD,EACLxD,MAAOuD,EACPrD,OAAQsD,EACR5D,MAAO,EACPE,OAAQ,GAERsE,EAAsD,OACrDlC,GAAoBF,EAAe,SAChCqC,EAAef,GACf3F,SAAS2G,iBAAiBf,EAASC,GAIhCa,MAIM,EAFLlF,EAAM2C,kBAAkByC,QACpBF,KAKRA,EAAcA,EAAYG,cAE9BJ,EAAqBC,EAAc,CAACA,GAAe,OAEjDI,EAA+C,EAA5BL,EAAmBM,OACtCC,GAAmBzC,GAAoBuC,KAEzCE,IAAoB3C,SACpBhD,EAAE4F,QACK,MAELC,EAAOpB,EAAWoB,KAClBC,EAAqB,cAATD,GAAiC,eAATA,UA8BpC7F,EAAU+F,SAAWD,IACjB1B,EAAK4B,QAAQ,iBAAkBhG,YAIrCA,EAAE4F,QACK,KAGNzC,GAGDiC,EAAqBzD,GACjByC,EAAKQ,gBACLQ,GAEJjF,EAAM8F,mBAAqB7B,EAAKQ,iBANhCzE,EAAM8F,mBAAqB,GAQ/B7B,EAAK8B,OACD9B,EAAKQ,gBACLQ,EACAD,EACAV,GACA,GAEJtE,EAAMI,OAASgE,EACfpE,EAAMK,OAASgE,EACfrE,EAAMgG,YAAa,EACnBhG,EAAM6D,uBAAwB,EAC9B7D,EAAMiG,WAAahC,EAAKxB,OAAOnE,MAAM4H,SAAW,yCAAyC9B,SAAcC,QAEnGmB,GAAmB3C,EACnByB,EAAWd,iBAEPK,IACAI,EAAKkC,UACDnG,EAAMwE,qBACNxE,EAAM8F,mBACNd,EACAnF,GAEJG,EAAM6D,uBAAwB,OAE/B,CACH7D,EAAMgG,YAAa,EACN,eAATN,GACApB,EAAWd,qBAEPH,0BACJA,GAAiBA,EAAcpF,WAC/BgG,EAAKmC,WAAWC,UAAUxG,EAAGwD,UAG9B,GAyCHY,SAAS,SAACpE,MACVA,EAAEG,MAAMgG,WAAY,KACZ3C,6BACJA,GAAiBA,EAAcpF,WAC3BgG,EAAKmC,WAAWE,KAAKzG,EAAGwD,UAKpCY,EAAKsC,MAAM1G,IAEPoE,YAAY,SAACpE,OACTG,UAAOsE,eACTpD,EAAOtB,GAAQC,EAAGoE,EAAKF,QAAQjE,OAC/BkG,EAAahG,EAAMgG,WAErB1B,IAAezE,EAAE+F,SACjB3B,EAAK4B,QAAQ,eACTW,WAAY3G,EAAE2G,SACdC,QAAQ,EACRC,SAAUV,GACPnG,IACHqB,UAGR+C,EAAKxB,OAAOnE,MAAM4H,SAAW,iBACzBF,IACAhG,EAAMgG,YAAa,EACnB/B,EAAKmC,WAAWO,WAEf3G,EAAM6D,uBACPI,EAAKkC,UACDnG,EAAMwE,qBACNxE,EAAM8F,mBACN5E,EACArB,IAwBJoE,YAAY,SAACpE,GACZoE,EAAK2C,aAAa/G,KAGvBoE,EAAKjB,gBAAiB,EA2BtBiB,EAAK4B,QAAQ,UAAW,MAEpB5B,UAAU,SAACpE,GACVoE,EAAK2C,aAAa/G,GAAG,KAG1BoE,EAAKjB,gBAAiB,EA2BtBiB,EAAK4B,QAAQ,QAAS,MAElB5B,SAAS,WACTA,EAAKhB,sBAAwBgB,EAAKjB,iBAClCiB,EAAKjB,gBAAiB,EACtBiB,EAAK4B,QAAQ,QAAS,MAGtB5B,wBAAwB,SAACpE,MACxBoE,EAAK4C,MAAMC,cAGZpE,EAAgBuB,EAAKvB,cAErBA,IAAkBqE,SAClBrE,EAAgBlE,SAASwI,qBAEvBC,EACFvE,aAAyBwE,QACnB,CAACxE,GACA,GAAGyE,MAAMC,KAAK1E,GACnBD,EAAS5C,EAAE4C,OAEjBwE,EAAWI,KAAK,SAACpJ,MACTA,IAAcwE,GAAUxE,EAAUqJ,SAAS7E,UAC3C5C,EAAE2D,kBACK,MArzBfS,EAAKxB,OAASsB,EAAQtB,OACtBwB,EAAKhG,UAAY8F,EAAQ9F,WAAaO,SAAS+I,KAC/CtD,EAAKF,WACDtB,OAAQ,KACRxE,UAAW,KACXyE,cAAe,KACfC,kBAAmB,GACnBE,eAAe,EACfE,kBAAkB,EAClBI,QAAS,IACTH,gBAAgB,EAChBC,qBAAsB,KACtBC,aAAc,KACdG,mBAAemE,EACfjE,YAAY,EACZC,gBAAgB,EAChBhB,gBAAgB,EAChBqB,uBAAuB,EACvBF,eAAgB1C,GAChBwC,SAAU,GACV3D,MAAO,GACJiE,GAEPE,EAAKwD,cACLxD,EAAKyD,iBACLzD,EAAK0D,qBAxCS7D,yDA8ClB,SACIW,eAEKA,gBAAkBA,EAEhBmD,2BAKX,kBACWA,KAAKnD,mCAEhB,SAAuBvB,cACba,EAAU6D,KAAK7D,QAErBvE,GAAUuE,EAAQb,aAAcA,EAAc,WAC1Ca,EAAQb,aAAeA,EAEvBe,EAAK0D,gDAGb,SACI1E,cAEMc,EAAU6D,KAAK7D,QAErBvE,GAAUuE,EAAQd,qBAAsBA,EAAsB,WAC1Dc,EAAQd,qBAAuBA,EAE/BgB,EAAK4D,qCAGb,SAAyBC,QAChBjB,MAAM9C,QAAQP,eAAiBsE,mBAExC,SAAqBA,QACZjB,MAAM9C,QAAQR,WAAauE,sBAcpC,SAAwBjI,eACfgH,MAAMkB,iBAAiBlI,GACrB+H,gBAKX,gBACSI,WACAC,QAAUL,KAAKK,OAAOC,eACtBrB,MAAMsB,aACNC,aAAaF,UAClBG,EAAY7J,SAAU,cAAeoJ,KAAKU,4BAErCL,OAAS,UACTpB,MAAQ,UACRuB,aAAe,UACf3F,OAAS,UACTxE,UAAY,UACZ8F,QAAU,yBAEnB,SAAwBtB,iCACdkB,EAAiBiE,KAAKjE,gBAAkB1C,GACxCsH,EAAO5E,EAAelB,GACtB+F,EAAS,CAACD,EAAKnH,KAAMmH,EAAKlH,KAAMkH,EAAKhH,KAAMgH,EAAKjH,SAElDqC,IAAmB1C,UAKhBuH,MAJGtH,EAAOuB,EAAOtB,iCAEHqH,OAAQtH,oLAOjC,eACUuH,EAAsD,eAEvD1E,QAAQpB,kBAAkB/D,QAAQ,SAAC6D,GAChCmC,EAASnC,GACTgG,EAAmBC,KAAKjG,GAEP,GAAG0E,MAAMC,KACtB5I,SAASmK,iBAAiBlG,IAGrB7D,QAAQ,SAACL,GACdkK,EAAmBC,KAAKnK,OAK7BkK,2BAKX,SAA6BzI,2BAAAA,EAAa4H,KAAKf,MAAM+B,qBAC3CjG,EAAoBiF,KAAKiB,wBACzBC,EAAmBnG,EAAkBZ,IAAI,SAACU,UAC5CwB,EAAK8E,iBAAiBtG,KAE1BzC,EAAM2C,kBAAoBA,EAC1B3C,EAAM8I,iBAAmBA,iBAO7B,SACIjJ,EACAsE,OAEM9E,WH3OYQ,MAClB,YAAaA,EAAG,KACVmJ,EAAQnJ,EAAEoJ,QAAQ,IAAMpJ,EAAEqJ,eAAe,SAExC,CACH9E,QAAS4E,EAAM5E,QACfC,QAAS2E,EAAM3E,eAGZ,CACHD,QAASvE,EAAEuE,QACXC,QAASxE,EAAEwE,aGiOT8E,EAAY,CACdnJ,MAAO,CACHgG,YAAY,GAEhB5B,kBACAC,kBACAC,WAAYzE,EACZ+F,SAAS,EACTH,KAAM,kBACK,WAGXmC,KAAKwB,YAAYD,EAAWhF,SACvBkF,UAAUF,GAEZvB,yBAEX,eACUvI,eAAE6D,iBAAcD,yBAElB2E,KAAKK,cACAA,OAAOC,eACPD,OAAS,MAEdhF,SACKgF,OAAS,IAAIqB,GAAcpG,GAAgB6D,aAC3CkB,OACAsB,QAAQ3B,KAAK4B,WACbC,MAAM7B,KAAK8B,SACXC,GAAG,OAAQ/B,KAAKgC,wBAG7B,+CAEiChC,KAAKK,aAG7BN,kCAET,gBACSlF,OAAS3E,GACToB,UAAKb,UAAW8D,KACjByF,KAAKnF,OACLmF,KAAK3J,eAGHwE,EAASmF,KAAKnF,OAEdpD,eAAEqD,kBAAea,eAAYC,wBAC9Bd,cACwB,iBAAlBA,EACD,GAAGyE,MAAMC,KAAK5I,SAASmK,iBAAiBjG,IACxCkF,KAAK7D,QAAQrB,eAAkBkF,KAAKnF,OAAOoH,gBAChDhD,MAAQ,IAAIiD,EAAMlC,KAAKlF,cAAe,CACvCqH,iBAAiB,EACjB9L,UAAW8I,OACXxD,aACAC,mBACDmG,GAAG,CACFtD,UAAWuB,KAAKwB,YAChB9C,KAAMsB,KAAKoC,OACXrD,QAASiB,KAAKyB,YAElBY,EAASzL,SAAU,cAAeoJ,KAAKU,4BAElCF,aAAelG,GAASgI,OAAOzH,EAAQ,CACxC0H,MAAOvC,KAAK7D,QAAQN,sBAG5B,SACI2G,EACAhG,EACAC,EACAgG,EACAvB,OAEMzJ,eAAE8D,YAASN,kBACTjC,SAAME,QAAKD,UAAOE,WACpBuJ,EAAa,CACf,CAAC1J,EAAME,GACP,CAACD,EAAOC,GACR,CAACD,EAAOE,GACR,CAACH,EAAMG,WAEJsJ,EAAQE,OAAO,SAACC,EAAG1L,OAChB0J,EAASM,EAAiBhK,GAC1B2L,EAASC,GAAS,CAACtG,EAASC,GAAUmE,MAExC3F,GAAiB4H,SACV,MAELE,83BAAgBC,CAAiBN,EAAY9B,OAE9CmC,EAAcpF,cACR,MAELsF,EAAcC,GAAYH,GAC1BI,EAAaD,GAAYtC,UAClBwC,EACTzK,KAAK0K,MAAOJ,EAAcE,EAAc,KACxC,EACA,MAGQxK,KAAKS,IAAI,IAAKmC,uBAMlC,2BACSiD,WACAuD,GAAG,SAAU,SAACtK,OAAEpB,cAAWiN,cACxBjH,EAAK4B,QAAQ,SAAU,CACnB5H,YACAiN,gBAGPvB,GAAG,OAAQ,SAACtK,OAAE8L,YAASC,YAAS9G,eACvBtE,EAAQsE,EAAWtE,MACzBA,EAAMI,QAAU+K,EAChBnL,EAAMK,QAAU+K,EAChBpL,EAAM8I,iBAAiBlK,QAAQ,SAAC4J,GAC5BA,EAAO5J,QAAQ,SAACyM,GACZA,EAAI,IAAMF,EACVE,EAAI,IAAMD,MAGlBnH,EAAK4C,MAAMyE,SACPH,EACAC,EACA9G,EAAWA,YACX,GAGJA,EAAWrE,OAASkL,EACpB7G,EAAWpE,OAASkL,EACpBnH,EAAKsC,MAAMjC,eAGvB,SACIiH,EACA9G,EACAvD,EACAoD,EACAkH,OAEMnM,SAAEwC,UAAOC,YAASF,aAAUD,cAK7B8C,gBAAkBA,EAEnB+G,QA+BK3F,QAAQ,cAAe,CACxB4F,SAAUhH,EACV5C,MAAOA,EAAME,IAAI,SAACC,UAAUL,EAAKK,KACjCF,QAASA,EAAQC,IAAI,SAACC,UAAUJ,EAASI,KACzCd,OACAoD,gBAGJzC,EAAM0D,QAAUzD,EAAQyD,cAwBnBM,QAAQ,SAAU,CACnB4F,SAAUhH,EACV5C,MAAOA,EAAME,IAAI,SAACC,UAAUL,EAAKK,KACjCF,QAASA,EAAQC,IAAI,SAACC,UAAUJ,EAASI,KACzCd,OACAoD,4BAIZ,SACIE,EACAsB,EACA5E,EACArB,OAEQyE,eAAYkC,aACdnH,4BAAEwC,UAAOC,YAASF,aAAUD,SAI5BrC,4BACFoM,UACAC,YACAC,aACAC,SAEEnG,EAAOpB,GAAcA,EAAWoB,KAChCoG,EAAuB,cAATpG,GAAiC,eAATA,OAgCvCG,QAAQ,YAAa,CACtB4F,SAAU7D,KAAKnD,gBACf5C,MAAOA,EAAME,IAAI,SAACC,UAAUL,EAAKK,KACjCF,QAASA,EAAQC,IAAI,SAACC,UAAUJ,EAASI,KACzC0J,WAAYA,EAAW3J,IAAI,SAACC,UAAU6J,EAAU7J,KAChD2J,aAAcA,EAAa5J,IAAI,SAACC,UAAU4J,EAAc5J,KACxD8J,cACAtF,WAAYA,EACZtF,OACAoD,wBA8LR,SAAczE,EAAQqB,gBAAAA,EAAOtB,GAAQC,EAAG+H,KAAK7D,QAAQjE,YACzCE,UAAOsE,eACPxD,QAAKF,SAAMH,UAAOE,WACpBqF,EAAahG,EAAMgG,WACrBuF,EAAuD,GACvD9G,EAAmD,MACnDuB,EAAY,MACPvD,OAAOnE,MAAM4H,SACd,wDAEwBtF,SAAWE,eAC1BL,eAAkBE,YAEzBoL,EAAgBnE,KAAKoE,QACvB9K,EACAlB,EAAMI,OACNJ,EAAMK,OACNL,EAAM2C,kBACN3C,EAAM8I,kBAEVyC,EAAsB3D,KAAKnD,gBAC3BA,EAAkBjD,GACdxB,EAAM8F,mBACNiG,QAGCtH,gBAAkBA,OAGtBoB,QAAQ,cACNhG,IACH6G,SAAUV,EACV9E,UAGA8E,QACKD,OAAOwF,EAAqB9G,EAAiBvD,EAAMoD,mBA0ChE,SAAqBzE,EAAQoM,SACnBhJ,EAAuB,GAAGhB,OAC5B2F,KAAK7D,QAAQd,sBAEXiJ,EAAQC,GAAStM,EAAEyE,WAAYzE,EAAEuM,KACjCC,KAAqBpJ,EAAqB,oBAC1CA,EACA,CAACA,OAEHgJ,EAAS,KACHK,EAAYzM,EAAEuM,WAEbC,EAAWhF,KAAK,SAACkF,UACpBA,EAAKlF,KAAK,SAAC+E,UAAQA,IAAQE,aAG5BD,EAAWhF,KAAK,SAACkF,UACpBA,EAAKC,MAAM,SAACJ,UAA8B,EAAtBF,EAAM9G,QAAQgH,QAvuBxCK,0UApBMrK,KAAmB,SAACsK,EAAWC,OACjCvO,EAA2B,CAC7BwO,YAAY,EACZC,cAAc,EACdC,sBACWlF,KAAK7D,QAAQ4I,KAGtBI,GAAkB,OAAOJ,mEAC3BD,EAAUK,GACV3O,EAAW4O,IAAM,SAAalF,QACrBiF,GAAQjF,IAGjB1J,EAAW4O,IAAM,SAAalF,QACrB/D,QAAQ4I,GAAY7E,GAGjCxE,OAAO2J,eAAeP,EAAWC,EAAUvO,oEAEzCqO,IAAgBS,kFFCA,CAClB,YACA,OACA,UACA,cACA,SACA,YACA,UACA,QACA,kBAMmB,CACnB,cACA,wBACA,qBACA,mBACA,qBACA,wBACA,mCGxFJ,IAAK,IAAMzO,MAAQ0O,GACdV,GAAgBhO,IAAQ0O,GAAQ1O"}